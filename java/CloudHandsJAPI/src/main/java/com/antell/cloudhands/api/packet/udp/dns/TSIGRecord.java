
package com.antell.cloudhands.api.packet.udp.dns;

import com.antell.cloudhands.api.utils.Base64;
import com.antell.cloudhands.api.utils.Text;
import org.elasticsearch.common.xcontent.XContentBuilder;

import java.io.DataInput;
import java.io.IOException;
import java.util.Date;

/**
 * Transaction Signature - this record is automatically generated by the
 * sender and receiver of a message, using a shared key.
 *
 */

public class TSIGRecord extends Record {

    private Name alg;
    private Date timeSigned;
    private int fudge;
    private byte[] signature;
    private int originalID;
    private int error;
    private byte[] other;

    TSIGRecord() {
    }

    @Override
    public Record getObject() {
        return new TSIGRecord();
    }


    @Override
    public void read(DataInput in) throws IOException {
        alg = new Name(in);

        long time = in.readLong();
        timeSigned = new Date(time * 1000);
        fudge = in.readUnsignedShort();

        signature = Text.readBytes(in,2);

        originalID = in.readUnsignedShort();
        error = in.readUnsignedShort();

        other = Text.readBytes(in,2);
    }


    private String getOtherValue(){

        StringBuffer sb = new StringBuffer();

        if (other == null)
            sb.append(0);
        else {
            if (error == Rcode.BADTIME) {
                if (other.length != 6) {
                    sb.append("badErrorTime");
                } else {
                    long time = ((long) (other[0] & 0xFF) << 40) +
                            ((long) (other[1] & 0xFF) << 32) +
                            ((other[2] & 0xFF) << 24) +
                            ((other[3] & 0xFF) << 16) +
                            ((other[4] & 0xFF) << 8) +
                            ((other[5] & 0xFF));
                    sb.append(new Date(time * 1000));
                }
            } else {
                sb.append(Base64.toString(other));
            }
        }

        return sb.toString();
    }

    /**
     * Converts rdata to a String
     */
    @Override
    public String rrToString() {
        StringBuffer sb = new StringBuffer();
        sb.append(alg);
        sb.append(" ");
        sb.append(timeSigned.getTime() / 1000);
        sb.append(" ");
        sb.append(fudge);
        sb.append(" ");
        sb.append(signature.length);
        sb.append(" ");
        sb.append(Base64.toString(signature));
        sb.append(" ");
        sb.append(Rcode.TSIGstring(error));
        sb.append(" ");
        if (other == null)
            sb.append(0);
        else {
            sb.append(other.length);
            sb.append(" ");
            if (error == Rcode.BADTIME) {
                if (other.length != 6) {
                    sb.append("<invalid BADTIME other data>");
                } else {
                    long time = ((long) (other[0] & 0xFF) << 40) +
                            ((long) (other[1] & 0xFF) << 32) +
                            ((other[2] & 0xFF) << 24) +
                            ((other[3] & 0xFF) << 16) +
                            ((other[4] & 0xFF) << 8) +
                            ((other[5] & 0xFF));
                    sb.append("<server time: ");
                    sb.append(new Date(time * 1000));
                    sb.append(">");
                }
            } else {
                sb.append("<");
                sb.append(Base64.toString(other));
                sb.append(">");
            }
        }
        return sb.toString();
    }

    @Override
    public XContentBuilder rdataToJson(XContentBuilder cb) throws IOException {

        cb.field("alg",alg.getName());
        cb.field("timeSigned",timeSigned);
        cb.field("fudge",fudge);
        cb.field("signature",Base64.toString(signature));
        cb.field("error",Rcode.TSIGstring(error));
        cb.field("other",getOtherValue());

        return cb;
    }

    /**
     * Returns the shared key's algorithm
     */
    public Name
    getAlgorithm() {
        return alg;
    }

    /**
     * Returns the time that this record was generated
     */
    public Date
    getTimeSigned() {
        return timeSigned;
    }

    /**
     * Returns the time fudge factor
     */
    public int
    getFudge() {
        return fudge;
    }

    /**
     * Returns the signature
     */
    public byte[]
    getSignature() {
        return signature;
    }

    /**
     * Returns the original message ID
     */
    public int
    getOriginalID() {
        return originalID;
    }

    /**
     * Returns the extended error
     */
    public int
    getError() {
        return error;
    }

    /**
     * Returns the other data
     */
    public byte[]
    getOther() {
        return other;
    }


}
